<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://kitsunebinode.github.io/news/article-88019.htm" />
    <meta charset="utf-8">
    <title>SpringBoot项目使用EasyPoi实现导入导出，就是这么的丝滑</title>
        <meta name="description" content="在项目的开发工程中，经常有导入导出数据的常见功能场景，Apache的POI是处理导入导出中最常用的，但是其原生的用法太复杂，很繁琐，总是在Copy… ，无意间发现一款简单粗暴的神器EasyPoi，Ea" />
        <link rel="icon" href="/assets/website/img/kitsunebinode/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Kitsunebi Node机场节点订阅官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://kitsunebinode.github.io/news/article-88019.htm" />
    <meta property="og:site_name" content="Kitsunebi Node机场节点订阅官网" />
    <meta property="og:title" content="SpringBoot项目使用EasyPoi实现导入导出，就是这么的丝滑" />
    <meta property="og:image" content="https://kitsunebinode.github.io/uploads/20240907/fa9fc70f8b6d6c85b919e173dd49125d.webp" />
        <meta property="og:release_date" content="2025-04-04T09:05:40" />
    <meta property="og:updated_time" content="2025-04-04T09:05:40" />
        <meta property="og:description" content="在项目的开发工程中，经常有导入导出数据的常见功能场景，Apache的POI是处理导入导出中最常用的，但是其原生的用法太复杂，很繁琐，总是在Copy… ，无意间发现一款简单粗暴的神器EasyPoi，Ea" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="SpringBoot项目使用EasyPoi实现导入导出，就是这么的丝滑">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">

    <!-- mobile responsive meta -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <!-- theme meta -->
    <meta name="theme-name" content="Kitsunebi Node机场节点订阅官网" />
    <!-- ** Plugins Needed for the Project ** -->
    <!-- plugins -->
    <link rel="stylesheet" href="/assets/website/js/frontend/kitsunebinode/bootstrap/bootstrap.min.css">
    <link rel="stylesheet" href="/assets/website/js/frontend/kitsunebinode/themify-icons/themify-icons.css">
    <!-- Main Stylesheet -->
    <link href="/assets/website/css/kitsunebinode/style.css" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-K0G227LMQD"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-K0G227LMQD');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <header class="sticky-top navigation">
        <div class=container>
            <nav class="navbar navbar-expand-lg navbar-light bg-transparent">
                <a class="navbar-brand" href="/">
                                <span>Kitsunebi Node</span>
                                </a>
                <button class="navbar-toggler border-0" type="button" data-toggle="collapse" data-target="#navigation">
                    <i class="ti-align-right h4 text-dark"></i></button>
                <div class="collapse navbar-collapse text-center" id=navigation>
                    <ul class="navbar-nav mx-auto align-items-center">
                                                <li class="nav-item"><a class="nav-link" href="/">首页</a></li>
                                                <li class="nav-item"><a class="nav-link" href="/free-nodes/">免费节点</a></li>
                                                <li class="nav-item"><a class="nav-link" href="/paid-subscribe/">推荐机场</a></li>
                                                <li class="nav-item"><a class="nav-link" href="/client.htm">客户端</a></li>
                                                <li class="nav-item"><a class="nav-link" href="/news/">新闻资讯</a></li>
                                            </ul>
                </div>
            </nav>
        </div>
    </header>
    <!-- details page -->
    <section class="pt-5">
        <div class="container shadow section-sm rounded">
            <div class="row">
                <div class="col-md-12 pb-5">
                    <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / 正文
                </div>
                <div class="col-md-9">
                    <h1 class="mb-4">SpringBoot项目使用EasyPoi实现导入导出，就是这么的丝滑</h1>
                                    <input type="hidden" id="share-website-info" data-name="Clash Meta免费节点订阅站" data-url="https://clash-meta.github.io">
                  				  				  				<div id="content_views" class="htmledit_views"> </h1> <p>在项目的开发工程中，经常有导入导出数据的常见功能场景，Apache的POI是处理导入导出中最常用的，但是其原生的用法太复杂，很繁琐，总是在Copy… ，无意间发现一款简单粗暴的神器EasyPoi，EasyPoi也是基于POI的，在SpringBoot中也是做了很好的封装，让我们能够在SpringBoot 快速地使用 EasyPoi 进行开发，很方便，而且支持多种格式的导入导出。</p> <p>本篇文章就给大家介绍下EasyPoi。</p> <hr/> </h1> <p>EasyPoi功能如同名字easy，主打的功能就是容易,让一个没见接触过poi的人员就可以方便的写出Excel导出，Excel模板导出，Excel导入，Word模板导出，通过简单的注解和模板语言(熟悉的表达式语法)，完成以前复杂的写法。</p> </h1> <ul> <li>基于注解的导入导出，修改注解就可以修改Excel</li> <li>支持常用的样式自定义</li> <li>基于map可以灵活定义的表头字段</li> <li>支持一对多的导出，导入</li> <li>支持模板的导出，一些常见的标签,自定义标签</li> <li>支持HTML/Excel转换，如果模板还不能满足用户的变态需求，请用这个功能</li> <li>支持word的导出，支持图片、Excel</li> </ul> </h1> <p>easypoi起因就是Excel的导入导出，最初的模板是实体和Excel的对应，model–row，filed–col 这样利用注解我们可以和容易做到excel到导入导出。</p> <h2>1.@Excel</h2> <p>这个是必须使用的注解，如果需求简单只使用这一个注解也是可以的，涵盖了常用的Excel需求。</p> <table> <thead> <tr> <th>属性</th> <th>类型</th> <th>默认值</th> <th>功能</th> </tr> </thead> <tbody> <tr> <td>name</td> <td>String</td> <td>null</td> <td>列名</td> </tr> <tr> <td>orderNum</td> <td>String</td> <td>“0”</td> <td>列的排序</td> </tr> <tr> <td>replace</td> <td>String[]</td> <td>{}</td> <td>值的替换 {a_id,b_id}</td> </tr> <tr> <td>type</td> <td>int</td> <td>1</td> <td>导出类型 1 是文本 2 是图片,3 是函数,10 是数字 默认是文本</td> </tr> <tr> <td>exportFormat</td> <td>String</td> <td>“”</td> <td>导出的时间格式,以这个是否为空来判断是否需要格式化日期</td> </tr> <tr> <td>importFormat</td> <td>String</td> <td>“”</td> <td>导入的时间格式,以这个是否为空来判断是否需要格式化日期</td> </tr> <tr> <td>format</td> <td>String</td> <td>“”</td> <td>时间格式,相当于同时设置了exportFormat 和 importFormat</td> </tr> <tr> <td>suffix</td> <td>String</td> <td>“”</td> <td>文字后缀,如% 90 变成90%</td> </tr> <tr> <td>isHyperlink</td> <td>boolean</td> <td>false</td> <td>超链接,如果是需要实现接口返回对象</td> </tr> <tr> <td>isImportField</td> <td>boolean</td> <td>true</td> <td>校验字段,看看这个字段是不是导入的Excel中有,如果没有说明是错误的Excel,读取失败,支持name_id</td> </tr> <tr> <td>## 2.@ExcelCollection</td> <td></td> <td></td> </tr> <tr> <td>一对多的集合注解，用以标记集合是否被数据以及集合的整体排序</td> <td></td> <td></td> </tr> <tr> <td>属性</td> <td>类型</td> <td>默认值</td> <td>功能</td> </tr> <tr> <td>--------</td> <td>-----</td> <td>-------</td> <td>-----</td> </tr> <tr> <td>id</td> <td>String</td> <td>null</td> <td>定义ID</td> </tr> <tr> <td>name</td> <td>String</td> <td>null</td> <td>定义集合列名,支持nanm_id</td> </tr> <tr> <td>orderNum</td> <td>int</td> <td>0</td> <td>排序,支持name_id</td> </tr> <tr> <td>type</td> <td>Class&lt;?&gt;</td> <td>ArrayList.class</td> <td>导入时创建对象使用</td> </tr> </tbody> </table> </h1> <h2>1.添加依赖</h2> <pre><code class="hljs">&lt;dependency&gt;    &lt;groupId&gt;cn.afterturn&lt;/groupId&gt;    &lt;artifactId&gt;easypoi-spring-boot-starter&lt;/artifactId&gt;    &lt;version&gt;4.2.0&lt;/version&gt; &lt;/dependency&gt;</code></pre> <h2>2.导入功能实现</h2> <p>首先定义需要导入的数据类型UserImportVO，并使用@Excel注解与excel列映射，导入的时候通常需要对导入的数据进行一些校验。</p> <p>EasyPoi的校验使用也很简单，对象上加上通用的校验规则，配置下需要校验就可以了，校验主要是JSR 303 规范，可结合Hibernate Validator使用：</p> <h3>2.1 UserImportVO导入类</h3> <p>导入类对象实现IExcelModel、IExcelDataModel 接口，可获取到错误校验信息。</p> <pre><code class="hljs">@Data public class UserImportVO implements Serializable,IExcelModel, IExcelDataModel {      @NotBlank     @Excel(name = "姓名")     private String realName;      @Excel(name = "性别", replace = { "男_1", "女_2" })     private Integer sex;      @Excel(name = "出生日期", format = "yyyy-MM-dd")     private Date birthday;      @Length(min=1, max=11, message = "请填写正确的手机号")     @Excel(name = "手机号码")     private String phone;      @Excel(name = "固定电话")     private String tel;      @Email(message = "请填写正确的邮箱地址")     @Excel(name = "邮箱")     private String email;      @Excel(name = "头像地址")     private String avatar;      @Excel(name = "信息")     private String errorMsg;      private Integer rowNum;      @Override     public Integer getRowNum() {         return this.rowNum;     }      @Override     public void setRowNum(Integer i) {         this.rowNum = i;     }      @Override     public String getErrorMsg() {         return this.errorMsg;     }      @Override     public void setErrorMsg(String s) {         this.errorMsg = s;     } }</code></pre> <h3>2.2 controller层</h3> <p>在编写controller层导入方法</p> <pre><code class="hljs">    @Autowired     private IUserService userService;      @PostMapping("/importExcel")     public String importExcel(@RequestParam("file") MultipartFile file) {         try {             String result = userService.importExcel(file);             return result;         } catch (Exception e) {             return "导入失败";         }     }</code></pre> <h3>2.3 service层</h3> <p>具体的实现是在service层</p> <pre><code class="hljs">   @Autowired     private UserVerifyHandler userVerifyHandler;      @Override     public String importExcel(MultipartFile file) throws Exception{         ImportParams importParams = new ImportParams();         //表格标题行数,默认0         importParams.setTitleRows(1);         //是否需要校验上传的Excel         importParams.setNeedVerify(true);         //告诉easypoi我们自定义的验证器         importParams.setVerifyHandler(userVerifyHandler);         ExcelImportResult&lt;UserImportVO&gt; result = ExcelImportUtil.importExcelMore(file.getInputStream(),UserImportVO.class,importParams);         if (!result.isVerifyFail() &amp;&amp; !CollectionUtils.isEmpty(result.getList())) {             for (UserImportVO vo : result.getList()) {                 log.info("从Excel导入数据到数据库的详细为 ：{}", vo);                 User user = new User();                 BeanUtil.copyProperties(vo,user);                 this.save(user);             }         } else {             for (UserImportVO vo : result.getFailList()) {                 log.info("校验失败的详细为 ：{}", vo);             }             return "文档校验失败";         }         return "导入成功";     }</code></pre> <h3>2.4 ImportParams 参数</h3> <p>ImportParams 参数各属性介绍</p> <table> <thead> <tr> <th>属性</th> <th>类型</th> <th>默认值</th> <th>功能</th> </tr> </thead> <tbody> <tr> <td>titleRows</td> <td>int</td> <td>0</td> <td>表格标题行数,默认0</td> </tr> <tr> <td>headRows</td> <td>int</td> <td>1</td> <td>表头行数,默认1</td> </tr> <tr> <td>startRows</td> <td>int</td> <td>0</td> <td>字段真正值和列标题之间的距离 默认0</td> </tr> <tr> <td>startSheetIndex</td> <td>int</td> <td>0</td> <td>开始读取的sheet位置,默认为0</td> </tr> <tr> <td>needVerfiy</td> <td>boolean</td> <td>false</td> <td>是否需要校验上传的Excel</td> </tr> <tr> <td>needSave</td> <td>boolean</td> <td>false</td> <td>是否需要保存上传的Excel</td> </tr> <tr> <td>saveUrl</td> <td>String</td> <td>"upload/excelUpload"</td> <td>保存上传的Excel目录,默认是 如 TestEntity这个类保存路径就是upload/excelUpload/Test/yyyyMMddHHmss* 保存名称上传时间五位随机数</td> </tr> <tr> <td>importFields</td> <td>String[]</td> <td>null</td> <td>导入时校验数据模板,是不是正确的Excel</td> </tr> <tr> <td>verifyHanlder</td> <td>IExcelVerifyHandler</td> <td>null</td> <td>校验处理接口,自定义校验</td> </tr> <tr> <td>dataHanlder</td> <td>IExcelDataHandler</td> <td>null</td> <td>数据处理接口,以此为主,replace,format都在这后面</td> </tr> </tbody> </table> <h3>2.5 自定义校验规则</h3> <p>通用的校验满足不了所有的校验，例如还需要通过查询数据库，校验数据的唯一性，此时需要自定义一个校验规则，实现IExcelVerifyHandler接口。</p> <pre><code class="hljs">@Component public class UserVerifyHandler implements IExcelVerifyHandler&lt;UserImportVO&gt; {      @Autowired     private IUserService userService;      @Override     public ExcelVerifyHandlerResult verifyHandler(UserImportVO vo) {         ExcelVerifyHandlerResult result = new ExcelVerifyHandlerResult();         //假设我们要添加用户，现在去数据库查询realName，如果存在则表示校验不通过。         User user = userService.getOne(new LambdaQueryWrapper&lt;User&gt;().eq(User::getRealName,vo.getRealName()));         if (user!=null) {             result.setMsg("唯一校验失败");             result.setSuccess(false);             return result;         }         result.setSuccess(true);         return result;     } }</code></pre> <h3>2.6 测试</h3> <p>1.使用postman工具进行导入测试，先填充一些不符合规则的数据，可以看到控制台输出的校验错误的信息。</p> <p class="img-center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads/20221230/ed4a655936857e696df1249a8d070663.jpg"></p> <p>2.再填充一些符合规则的数据，可以看到导入成功，数据库成功插入数据。</p> <p class="img-center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads/20221230/dbdd850910619b2ba940c913afd8c1f8.jpg"></p> <h2>3.导出功能实现</h2> <h3>3.1 UserExportVO导出类</h3> <p>导出类不需要配置校验规则，只需定义要导出的信息</p> <pre><code class="hljs">@Data public class UserExportVO implements Serializable {      @Excel(name = "姓名")     private String realName;      @Excel(name = "性别", replace = { "男_1", "女_2" }, suffix = "生")     private Integer sex;      @Excel(name = "出生日期", format = "yyyy-MM-dd")     private Date birthday;      @Excel(name = "手机号码")     private String phone;      @Excel(name = "固定电话")     private String tel;      @Excel(name = "邮箱")     private String email;      @Excel(name = "头像地址")     private String avatar;  }</code></pre> <h3>3.2 controller层</h3> <p>编写controller层导出方法</p> <pre><code class="hljs">    @GetMapping("/exportExcel")     public void export(HttpServletResponse response) {         //查询要导出的数据         List&lt;UserExportVO&gt; users = userService.getUserExportList();         ExcelUtil.exportExcelX(users, "测试导出表", "sheet1", UserExportVO.class, "测试导出表.xlsx", response);     }</code></pre> <h3>3.3 service层</h3> <p>编写service层查询需要导出的数据，把查询出来的集合转化成导出VO集合。</p> <pre><code class="hljs">	@Override     public List&lt;UserExportVO&gt; getUserExportList() {         List&lt;User&gt; users = this.list();         //users集合转成export集合         List&lt;UserExportVO&gt; exportVOList = users.stream().map(user -&gt; {             UserExportVO vo = new UserExportVO();             BeanUtils.copyProperties(user, vo);             return vo;         }).collect(Collectors.toList());         return exportVOList;     }</code></pre> <h3>3.4 测试</h3> <p>直接浏览器请求导出接口，成功导出。</p> <p class="img-center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads/20221230/90d9cd21adada606c9722dd11957c0b8.jpg"></p> <hr/> </h1> <p>好了，以上就是今天要讲的内容，感谢大家的阅读。本文仅仅简单介绍了使用EasyPoi导入导出功能的使用，而EasyPoi还提供了模板的导出、图片的导出、word的导出等等功能，</p> <p>&nbsp;</p> </p></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-88018.htm">解决：bash: /root/.bashrc: Permission denied</a></p>
                                        <p>下一个：<a href="/news/article-88717.htm">北京动物观赏医院电话号码（北京观赏宠物医院电话）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-89461.htm" title="动物疫苗接种方法有几种 动物疫苗接种方法有几种类型">动物疫苗接种方法有几种 动物疫苗接种方法有几种类型</a></li>
                        <li class="py-2"><a href="/news/article-86558.htm" title="做宠物繁殖赚钱吗养猫好吗（养宠物繁殖卖钱）">做宠物繁殖赚钱吗养猫好吗（养宠物繁殖卖钱）</a></li>
                        <li class="py-2"><a href="/news/article-69453.htm" title="vue3.0中对mapState,mapGetters封装">vue3.0中对mapState,mapGetters封装</a></li>
                        <li class="py-2"><a href="/news/article-81561.htm" title="宠物粮食行业发展前景分析论文题目大全及答案（宠物粮行业环境分析）">宠物粮食行业发展前景分析论文题目大全及答案（宠物粮行业环境分析）</a></li>
                        <li class="py-2"><a href="/news/article-67531.htm" title="宠物狗疫苗能自己打吗多少钱（狗狗疫苗自己打可以办狗证吗）">宠物狗疫苗能自己打吗多少钱（狗狗疫苗自己打可以办狗证吗）</a></li>
                        <li class="py-2"><a href="/news/article-75411.htm" title="我们如何从MySQL表中删除所有行？">我们如何从MySQL表中删除所有行？</a></li>
                        <li class="py-2"><a href="/news/article-66274.htm" title="宠物猫的一般价格（宠物猫的一般价格是多少）">宠物猫的一般价格（宠物猫的一般价格是多少）</a></li>
                        <li class="py-2"><a href="/news/article-68166.htm" title="宠物粮生产基地大多在郊区吗 宠物粮生产基地大多在郊区吗为什么">宠物粮生产基地大多在郊区吗 宠物粮生产基地大多在郊区吗为什么</a></li>
                        <li class="py-2"><a href="/news/article-80201.htm" title="一只身价13亿的猫（世界上最贵的猫）">一只身价13亿的猫（世界上最贵的猫）</a></li>
                        <li class="py-2"><a href="/news/article-88717.htm" title="北京动物观赏医院电话号码（北京观赏宠物医院电话）">北京动物观赏医院电话号码（北京观赏宠物医院电话）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">18</span> <a href="/date/2025-04/" title="2025-04 归档">2025-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">89</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
    <!-- /details page -->
        <footer>
        <div class="container">
            <div class="py-4 text-center">
                <p class="text-light">
                                        <p>
                                                <a href="/">首页</a> |
                                                <a href="/free-nodes/">免费节点</a> |
                                                <a href="/paid-subscribe/">推荐机场</a> |
                                                <a href="/client.htm">客户端</a> |
                                                <a href="/news/">新闻资讯</a> |
                                                <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                    <a href="/">Kitsunebi Node机场节点订阅官网</a> 版权所有 Powered by WordPress
                </p>
            </div>
        </div>
    </footer>
    <!-- plugins -->
    <script src="/assets/website/js/frontend/kitsunebinode/jQuery/jquery.min.js"></script>
    <script src="/assets/website/js/frontend/kitsunebinode/bootstrap/bootstrap.min.js"></script>
    <script src="/assets/website/js/frontend/kitsunebinode/masonry/masonry.min.js"></script>
    <script src="/assets/website/js/frontend/kitsunebinode/clipboard/clipboard.min.js"></script>
    <script src="/assets/website/js/frontend/kitsunebinode/match-height/jquery.matchHeight-min.js"></script>
    <!-- Main Script -->
    <script src="/assets/website/js/frontend/kitsunebinode/script.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>