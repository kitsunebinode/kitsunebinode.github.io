<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://kitsunebinode.github.io/news/article-52418.htm" />
    <meta charset="utf-8">
    <title>SpringBoot 整合 Kafka 以及 @KafkaListener 注解的使用</title>
        <meta name="description" content="我是在 windows 中安装的 Kafka，用于在本地测试用的 Windows 安装 kafka   1、添加项目依赖         &lt;dependency&gt;             " />
        <link rel="icon" href="/assets/website/img/kitsunebinode/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Kitsunebi Node机场节点订阅官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://kitsunebinode.github.io/news/article-52418.htm" />
    <meta property="og:site_name" content="Kitsunebi Node机场节点订阅官网" />
    <meta property="og:title" content="SpringBoot 整合 Kafka 以及 @KafkaListener 注解的使用" />
    <meta property="og:image" content="https://kitsunebinode.github.io/uploads/20240907/d9374e5d29d2ea61a873a40f0b796378.webp" />
        <meta property="og:release_date" content="2025-02-07T07:18:20" />
    <meta property="og:updated_time" content="2025-02-07T07:18:20" />
        <meta property="og:description" content="我是在 windows 中安装的 Kafka，用于在本地测试用的 Windows 安装 kafka   1、添加项目依赖         &lt;dependency&gt;             " />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="SpringBoot 整合 Kafka 以及 @KafkaListener 注解的使用">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">

    <!-- mobile responsive meta -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <!-- theme meta -->
    <meta name="theme-name" content="Kitsunebi Node机场节点订阅官网" />
    <!-- ** Plugins Needed for the Project ** -->
    <!-- plugins -->
    <link rel="stylesheet" href="/assets/website/js/frontend/kitsunebinode/bootstrap/bootstrap.min.css">
    <link rel="stylesheet" href="/assets/website/js/frontend/kitsunebinode/themify-icons/themify-icons.css">
    <!-- Main Stylesheet -->
    <link href="/assets/website/css/kitsunebinode/style.css" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-K0G227LMQD"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-K0G227LMQD');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <header class="sticky-top navigation">
        <div class=container>
            <nav class="navbar navbar-expand-lg navbar-light bg-transparent">
                <a class="navbar-brand" href="/">
                                <span>Kitsunebi Node</span>
                                </a>
                <button class="navbar-toggler border-0" type="button" data-toggle="collapse" data-target="#navigation">
                    <i class="ti-align-right h4 text-dark"></i></button>
                <div class="collapse navbar-collapse text-center" id=navigation>
                    <ul class="navbar-nav mx-auto align-items-center">
                                                <li class="nav-item"><a class="nav-link" href="/">首页</a></li>
                                                <li class="nav-item"><a class="nav-link" href="/free-nodes/">免费节点</a></li>
                                                <li class="nav-item"><a class="nav-link" href="/paid-subscribe/">推荐机场</a></li>
                                                <li class="nav-item"><a class="nav-link" href="/client.htm">客户端</a></li>
                                                <li class="nav-item"><a class="nav-link" href="/news/">新闻资讯</a></li>
                                            </ul>
                </div>
            </nav>
        </div>
    </header>
    <!-- details page -->
    <section class="pt-5">
        <div class="container shadow section-sm rounded">
            <div class="row">
                <div class="col-md-12 pb-5">
                    <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / 正文
                </div>
                <div class="col-md-9">
                    <h1 class="mb-4">SpringBoot 整合 Kafka 以及 @KafkaListener 注解的使用</h1>
                                    <input type="hidden" id="share-website-info" data-name="Clash Meta免费节点订阅站" data-url="https://clash-meta.github.io">
                  				  				  				<div id="content_views" class="htmledit_views"> </h1> <p>我是在 windows 中安装的 Kafka，用于在本地测试用的</p> <p><a class="link-info" href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/asd14828/p/13529487.html"  title="Windows 安装 kafka" rel="nofollow">Windows 安装 kafka</a></p> <p><img fetchpriority="high" decoding="async" alt="" height="292" src="http://img.555519.xyz/uploads3/20220607/719c1686830f22ebd3e29be96550bcf1.jpg"></p> </h1> <h2>1、添加项目依赖</h2> <pre><code class="language-XML">        &lt;dependency&gt;             &lt;groupId&gt;org.springframework.kafka&lt;/groupId&gt;             &lt;artifactId&gt;spring-kafka&lt;/artifactId&gt;         &lt;/dependency&gt;</code></pre> <h2>2、添加配置文件 application.properties</h2> <p>配置中用了<strong>批量消费</strong></p> <pre><code class="language-XML"> # 指定kafka server的地址，集群配多个，中间，逗号隔开 spring.kafka.bootstrap-servers=127.0.0.1:9092 #重试次数 spring.kafka.producer.retries=3 #批量发送的消息数量 spring.kafka.producer.batch-size=1000 #32MB的批处理缓冲区 spring.kafka.producer.buffer-memory=33554432 #默认消费者组 spring.kafka.consumer.group-id=crm-microservice-newperformance #最早未被消费的offset spring.kafka.consumer.auto-offset-reset=earliest #批量一次最大拉取数据量 spring.kafka.consumer.max-poll-records=4000 #是否自动提交 spring.kafka.consumer.enable-auto-commit=false #自动提交时间间隔，单位ms spring.kafka.consumer.auto-commit-interval=1000 #批消费并发量，小于或等于Topic的分区数 spring.kafka.consumer.batch.concurrency = 3</code></pre> <h3>3、创建一个&nbsp;KafkaConfiguration 配置类</h3> <pre><code class="language-java">package com.example.kafkademo.config;  import org.apache.kafka.clients.consumer.ConsumerConfig; import org.apache.kafka.clients.producer.ProducerConfig; import org.apache.kafka.common.serialization.StringDeserializer; import org.apache.kafka.common.serialization.StringSerializer; import org.springframework.beans.factory.annotation.Value; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory; import org.springframework.kafka.config.KafkaListenerContainerFactory; import org.springframework.kafka.core.*; import org.springframework.kafka.listener.ConsumerAwareListenerErrorHandler; import org.springframework.kafka.listener.ContainerProperties;  import java.util.HashMap; import java.util.Map;  /**  * @author Frederic.Hu  * @date 2022/05/25 18:00  */ @Configuration public class KafkaConfiguration {      @Value("${spring.kafka.bootstrap-servers}")     private String bootstrapServers;      @Value("${spring.kafka.producer.retries}")     private Integer retries;      @Value("${spring.kafka.producer.batch-size}")     private Integer batchSize;      @Value("${spring.kafka.producer.buffer-memory}")     private Integer bufferMemory;      @Value("${spring.kafka.consumer.group-id}")     private String groupId;      @Value("${spring.kafka.consumer.auto-offset-reset}")     private String autoOffsetReset;      @Value("${spring.kafka.consumer.max-poll-records}")     private Integer maxPollRecords;      @Value("${spring.kafka.consumer.batch.concurrency}")     private Integer batchConcurrency;      @Value("${spring.kafka.consumer.enable-auto-commit}")     private Boolean autoCommit;      @Value("${spring.kafka.consumer.auto-commit-interval}")     private Integer autoCommitInterval;      /**      *  生产者配置信息      */     @Bean     public Map&lt;String, Object&gt; producerConfigs() {         Map&lt;String, Object&gt; props = new HashMap&lt;&gt;();         props.put(ProducerConfig.ACKS_CONFIG, "0");         props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);         props.put(ProducerConfig.RETRIES_CONFIG, retries);         props.put(ProducerConfig.BATCH_SIZE_CONFIG, batchSize);         props.put(ProducerConfig.LINGER_MS_CONFIG, 1);         props.put(ProducerConfig.BUFFER_MEMORY_CONFIG, bufferMemory);         props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);         props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);         return props;     }      /**      *  生产者工厂      */     @Bean     public ProducerFactory&lt;String, String&gt; producerFactory() {         return new DefaultKafkaProducerFactory&lt;&gt;(producerConfigs());     }      /**      *  生产者模板      */     @Bean     public KafkaTemplate&lt;String, String&gt; kafkaTemplate() {         return new KafkaTemplate&lt;&gt;(producerFactory());     }      /**      *  消费者配置信息      */     @Bean     public Map&lt;String, Object&gt; consumerConfigs() {         Map&lt;String, Object&gt; props = new HashMap&lt;&gt;();         props.put(ConsumerConfig.GROUP_ID_CONFIG, groupId);         props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, autoOffsetReset);         props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);         props.put(ConsumerConfig.MAX_POLL_RECORDS_CONFIG, maxPollRecords);         props.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, autoCommit);         props.put(ConsumerConfig.SESSION_TIMEOUT_MS_CONFIG, 30000);         props.put(ConsumerConfig.REQUEST_TIMEOUT_MS_CONFIG, 30000);         props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);         props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);         return props;     }      /**      *  消费者批量工厂      */     @Bean     public KafkaListenerContainerFactory&lt;?&gt; batchFactory() {         ConcurrentKafkaListenerContainerFactory&lt;Integer, String&gt; factory = new ConcurrentKafkaListenerContainerFactory&lt;&gt;();         factory.setConsumerFactory(new DefaultKafkaConsumerFactory&lt;&gt;(consumerConfigs()));         //设置并发量，小于或等于Topic的分区数         factory.setConcurrency(batchConcurrency);         factory.getContainerProperties().setPollTimeout(1500);         //配置监听手动提交 ack，消费一条数据完后，立即提交         factory.getContainerProperties().setAckMode(ContainerProperties.AckMode.MANUAL_IMMEDIATE);         //设置为批量消费，每个批次数量在Kafka配置参数中设置ConsumerConfig.MAX_POLL_RECORDS_CONFIG         factory.setBatchListener(true);         return factory;     }      /**      * 异常处理器      */     @Bean     public ConsumerAwareListenerErrorHandler consumerAwareErrorHandler(){         return (message,exception,consumer)-&gt;{             System.out.println("消费异常："+message.getPayload());             return null;         };     }  }</code></pre> <h3>4、写一个向 Kafka 推送消费的测试类（生产者 producer）</h3> <pre><code class="language-java">package com.example.kafkademo;  import com.alibaba.fastjson.JSONObject; import org.junit.Test; import org.junit.runner.RunWith; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.context.SpringBootTest; import org.springframework.kafka.core.KafkaTemplate; import org.springframework.test.context.junit4.SpringRunner;  import java.util.*;  /**  * @author Frederic.Hu  * @Description  * @date 2022/05/25 17:46  */ @RunWith(SpringRunner.class) @SpringBootTest public class KafkaProducerTest {      private final Logger logger = LoggerFactory.getLogger(getClass());      @Autowired     private KafkaTemplate&lt;String, String&gt; kafkaTemplate;      @Test     public void testSend(){         Map&lt;String, Object&gt; map = new LinkedHashMap&lt;&gt;();         map.put("username", "小明");         map.put("userid", 1);         map.put("age", 12);         kafkaTemplate.send("test4", JSONObject.toJSONString(map)).addCallback(success -&gt; {             // 消息在分区内的offset             long offset = success.getRecordMetadata().offset();             logger.info("产线发送消息到kafka队列成功:{}, offset为:{}", JSONObject.toJSONString(map), offset);         }, failure -&gt; {             logger.error("产线发送消息到kafka队列失败:{}, 报错信息为:{}", JSONObject.toJSONString(map), failure.getMessage());         });     }  }</code></pre> <h3>5、创建一个消费者（消费者 consumer）</h3> <pre><code class="language-java">package com.example.kafkademo.listener;  import org.apache.kafka.clients.consumer.ConsumerRecord; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.kafka.annotation.KafkaListener; import org.springframework.kafka.support.Acknowledgment; import org.springframework.stereotype.Component;  import java.util.List;  /**  * @author Frederic.Hu  * @Description  * @date 2022/05/25 17:43  */ @Component public class BigDataTopicListener {      private final Logger logger = LoggerFactory.getLogger(getClass());      /**      * 监听kafka数据（批量消费）      * @param consumerRecords      * @param ack      */     @KafkaListener(id = "operation", topics = {"test4"}, containerFactory = "batchFactory", errorHandler="consumerAwareErrorHandler")     public void batchConsumer(List&lt;ConsumerRecord&lt;?, ?&gt;&gt; consumerRecords, Acknowledgment ack) {         long start = System.currentTimeMillis();          //...         //db.batchSave(consumerRecords);//批量插入或者批量更新数据          for (ConsumerRecord&lt;?, ?&gt; consumerRecord : consumerRecords) {             logger.info("消费的每条数据为：{}", consumerRecord.value());         }         //手动提交         ack.acknowledge();         logger.info("收到bigData推送的数据，拉取数据量：{}，消费时间：{}ms", consumerRecords.size(), (System.currentTimeMillis() - start));     }  }</code></pre> <h3>6、启动测试类，查看控制台</h3> <p><img decoding="async" alt="" height="509" src="http://img.555519.xyz/uploads3/20220607/82b4655e6eb31ad1418d1716621a9301.jpg"></p> <p><img decoding="async" alt="" height="288" src="http://img.555519.xyz/uploads3/20220607/85312287c189239fbc9730298ac3b7eb.jpg"></p> </h1> <h3>1、Kafka 中 topic 不存在的话，启动项目会报错</h3> <p>解决办法：启动项目之前，先在 Kafka 中创建好自己定义的 topic 名称，也可以在配置类中写一个自动创建 topic，但是出现一个问题，项目上线每个 Kafka 的集群数都不一样，自动创建 topic 时，分区数和副本数不好设置，设置不合理，启动项目是会报错的。</p> <h3>2、生产者生产消息是否成功怎么看？</h3> <p>解决办法：kafkaTemplate 提供了一个回调方法 addCallback，我们可以在回调方法中监控消息是否发送成功或失败时做补偿处理。</p> <h3>3、消费者消费消息报错了怎么办？</h3> <p>解决办法：新建一个&nbsp;ConsumerAwareListenerErrorHandler 类型的异常处理方法，用 @Bean 注入，BeanName 默认就是方法名，然后我们将这个异常处理器的 BeanName 放到 @KafkaListener 注解的 errorHandler 属性里面，当监听抛出异常的时候，则会自动调用异常处理器。</p> <h3>4、消费不同的 topic 中的数据，消费者组（group id）如果用的是同一个，消费时会报错的</h3> <p>解决办法：@KafkaListener 中的 id 监听器使用不同的名称，如果配置文属性配置了默认消费组（group id），注解中的 监听器 id 会覆盖默认的消费组（group id）。</p> <h3>5、重复消费了数据，怎么办？</h3> <p>原因：消费者宕机、重启或者被强行 kill 进程，导致消费者消费的 offset 没有提交。或者消费后的数据，当 offset 还没有提交时，Partition 就断开连接。</p> <p>解决办法：我目前项目中，是消费的数据插入到 MySQL 中的，如果重复消费了，插入到数据库中的时候，会查询该主键已经在数据库存在，则更新该条数据。</p> </h1> <ul> <li><a class="link-info" href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/u010634066/article/details/109803987"  title="【spring-kafka】@KafkaListener详解与使用" rel="nofollow">【spring-kafka】@KafkaListener详解与使用</a></li> <li><a class="link-info" href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.51cto.com/article/707646.html"  title="SpringBoot 整合 Kafka 实现数据高吞吐" rel="nofollow">SpringBoot 整合 Kafka 实现数据高吞吐</a></li> <li><a class="link-info" href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://juejin.cn/post/7028149679976251422"  title="SpringBoot整合kafka" rel="nofollow">SpringBoot整合kafka</a></li> </ul> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-51882.htm">塞尔达传说荒野之息海拉鲁神庙（塞尔达海拉鲁遗迹在哪里）</a></p>
                                        <p>下一个：<a href="/news/article-52419.htm">宠物领养资格证怎么考的（宠物领养证书怎么办理）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-41363.htm" title="领养宠物的定义是什么意思（领养宠物规则）">领养宠物的定义是什么意思（领养宠物规则）</a></li>
                        <li class="py-2"><a href="/news/article-19587.htm" title="动物疫苗打到人身上有事吗有影响吗知乎（动物疫苗不小心扎到人身上会怎么样）">动物疫苗打到人身上有事吗有影响吗知乎（动物疫苗不小心扎到人身上会怎么样）</a></li>
                        <li class="py-2"><a href="/news/article-48774.htm" title="南京宠物狗领养地址在哪里啊（南京宠物狗领养地址在哪里啊电话）">南京宠物狗领养地址在哪里啊（南京宠物狗领养地址在哪里啊电话）</a></li>
                        <li class="py-2"><a href="/news/article-20047.htm" title="兽用冷藏疫苗被冷冻后还能用吗多久可以打（兽用疫苗放在冰箱对食物）">兽用冷藏疫苗被冷冻后还能用吗多久可以打（兽用疫苗放在冰箱对食物）</a></li>
                        <li class="py-2"><a href="/news/article-41867.htm" title="猫粮利润空间大吗（猫粮挣钱吗）">猫粮利润空间大吗（猫粮挣钱吗）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-30-kitsunebi-node-share.htm" title="1月30日→19.5M/S|2025年最新免费节点Kitsunebi Node订阅链接地址">1月30日→19.5M/S|2025年最新免费节点Kitsunebi Node订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-18-kitsunebi-node.htm" title="11月18日→20.6M/S|2024年最新免费节点Kitsunebi Node订阅链接地址">11月18日→20.6M/S|2024年最新免费节点Kitsunebi Node订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-30-node-share.htm" title="12月30日→19.1M/S|2024年最新免费节点Kitsunebi Node订阅链接地址">12月30日→19.1M/S|2024年最新免费节点Kitsunebi Node订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-25-kitsunebi-node-github.htm" title="1月25日→21.1M/S|2025年最新免费节点Kitsunebi Node订阅链接地址">1月25日→21.1M/S|2025年最新免费节点Kitsunebi Node订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-30728.htm" title="南京寄养狗狗价格查询（南京宠物寄养价目表）">南京寄养狗狗价格查询（南京宠物寄养价目表）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">27</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
    <!-- /details page -->
        <footer>
        <div class="container">
            <div class="py-4 text-center">
                <p class="text-light">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                    <a href="/">Kitsunebi Node机场节点订阅官网</a> 版权所有 Powered by WordPress
                </p>
            </div>
        </div>
    </footer>
    <!-- plugins -->
    <script src="/assets/website/js/frontend/kitsunebinode/jQuery/jquery.min.js"></script>
    <script src="/assets/website/js/frontend/kitsunebinode/bootstrap/bootstrap.min.js"></script>
    <script src="/assets/website/js/frontend/kitsunebinode/masonry/masonry.min.js"></script>
    <script src="/assets/website/js/frontend/kitsunebinode/clipboard/clipboard.min.js"></script>
    <script src="/assets/website/js/frontend/kitsunebinode/match-height/jquery.matchHeight-min.js"></script>
    <!-- Main Script -->
    <script src="/assets/website/js/frontend/kitsunebinode/script.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>