<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://kitsunebinode.github.io/news/article-83701.htm" />
    <meta charset="utf-8">
    <title>java使用es中三种查询用法from size、search after、scroll</title>
        <meta name="description" content="from size：  深度分页或者size特别大的情况，会出现deep pagination问题。且es的自保机制max_result_window是10000，当查询数量超过一万就会报错 该查询的" />
        <link rel="icon" href="/assets/website/img/kitsunebinode/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Kitsunebi Node机场节点订阅官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://kitsunebinode.github.io/news/article-83701.htm" />
    <meta property="og:site_name" content="Kitsunebi Node机场节点订阅官网" />
    <meta property="og:title" content="java使用es中三种查询用法from size、search after、scroll" />
    <meta property="og:image" content="https://kitsunebinode.github.io/uploads/20240907/d8482214045d80859c0008a0d4493802.webp" />
        <meta property="og:release_date" content="2025-03-29T08:59:10" />
    <meta property="og:updated_time" content="2025-03-29T08:59:10" />
        <meta property="og:description" content="from size：  深度分页或者size特别大的情况，会出现deep pagination问题。且es的自保机制max_result_window是10000，当查询数量超过一万就会报错 该查询的" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="java使用es中三种查询用法from size、search after、scroll">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">

    <!-- mobile responsive meta -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <!-- theme meta -->
    <meta name="theme-name" content="Kitsunebi Node机场节点订阅官网" />
    <!-- ** Plugins Needed for the Project ** -->
    <!-- plugins -->
    <link rel="stylesheet" href="/assets/website/js/frontend/kitsunebinode/bootstrap/bootstrap.min.css">
    <link rel="stylesheet" href="/assets/website/js/frontend/kitsunebinode/themify-icons/themify-icons.css">
    <!-- Main Stylesheet -->
    <link href="/assets/website/css/kitsunebinode/style.css" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-K0G227LMQD"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-K0G227LMQD');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <header class="sticky-top navigation">
        <div class=container>
            <nav class="navbar navbar-expand-lg navbar-light bg-transparent">
                <a class="navbar-brand" href="/">
                                <span>Kitsunebi Node</span>
                                </a>
                <button class="navbar-toggler border-0" type="button" data-toggle="collapse" data-target="#navigation">
                    <i class="ti-align-right h4 text-dark"></i></button>
                <div class="collapse navbar-collapse text-center" id=navigation>
                    <ul class="navbar-nav mx-auto align-items-center">
                                                <li class="nav-item"><a class="nav-link" href="/">首页</a></li>
                                                <li class="nav-item"><a class="nav-link" href="/free-nodes/">免费节点</a></li>
                                                <li class="nav-item"><a class="nav-link" href="/paid-subscribe/">推荐机场</a></li>
                                                <li class="nav-item"><a class="nav-link" href="/client.htm">客户端</a></li>
                                                <li class="nav-item"><a class="nav-link" href="/news/">新闻资讯</a></li>
                                            </ul>
                </div>
            </nav>
        </div>
    </header>
    <!-- details page -->
    <section class="pt-5">
        <div class="container shadow section-sm rounded">
            <div class="row">
                <div class="col-md-12 pb-5">
                    <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / 正文
                </div>
                <div class="col-md-9">
                    <h1 class="mb-4">java使用es中三种查询用法from size、search after、scroll</h1>
                                    <input type="hidden" id="share-website-info" data-name="Clash Meta免费节点订阅站" data-url="https://clash-meta.github.io">
                  				  				  				<div id="content_views" class="htmledit_views"> </h1> <ol> <li> <h2>from size：</h2> <ol> <li>深度分页或者size特别大的情况，会出现deep pagination问题。且es的自保机制max_result_window是10000，当查询数量超过一万就会报错</li> <li>该查询的实现原理类似于mysql中的limit，比如查询第10001条数据，那么需要将前面的1000条都拿出来，进行过滤，最终才得到数据。（性能较差，实现简单，适用于少量数据）</li> </ol> </li> <li> <h2>search after</h2> <ol> <li>search_after缺点是不能够随机跳转分页，只能是一页一页的向后翻（当有新数据进来，也能实时查询到），并且需要至少指定一个唯一不重复字段来排序（一般是_id和时间字段）</li> <li>当使用search_after时，from值必须设置为0或者-1</li> <li>可以查询10000条以上数据</li> </ol> </li> <li> <h2>scroll</h2> <ol> <li>高效进行滚动查询，首次查询会在内存中保存一个历史快照以及游标（scroll_id）,记录当前消息查询的终止位置，下次查询的时候将基于游标进行消费（性能良好，不具备实时性，一般是用于大量数据导出或者索引重建）</li> <li>可以查询10000条以上数据</li> </ol> </li> </ol> </h1> <ol> <li> <h2>from size</h2> </li> </ol> <pre><code class="language-java">package com.example.es.test;  import org.apache.http.HttpHost; import org.elasticsearch.action.search.SearchRequest; import org.elasticsearch.action.search.SearchResponse; import org.elasticsearch.client.RequestOptions; import org.elasticsearch.client.RestClient; import org.elasticsearch.client.RestHighLevelClient; import org.elasticsearch.search.SearchHit; import org.elasticsearch.search.builder.SearchSourceBuilder; import org.elasticsearch.search.sort.SortBuilders; import org.elasticsearch.search.sort.SortOrder; import org.slf4j.Logger; import org.slf4j.LoggerFactory;  import java.util.ArrayList; import java.util.List; import java.util.Map;  /**  * @author   * @Description  es的from-size用法  * @date 2022/01/26 10:04  */ public class ESTest_from_size {      public static final Logger logger = LoggerFactory.getLogger(ESTest_searchAfter.class);      public static void main(String[] args) throws Exception{         long startTime = System.currentTimeMillis();         // 创建ES客户端         RestHighLevelClient esClient = new RestHighLevelClient(                 RestClient.builder(new HttpHost("localhost", 9200, "http"))         );         // 1、创建searchRequest         SearchRequest searchRequest = new SearchRequest("audit2");         // 2、指定查询条件         SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();//必须加上track_total_hits，不然就只显示10000         // 页面上的第一页等同于在es中的 0         sourceBuilder.from(0);         // 每页多少条数据         sourceBuilder.size(1000);         // 设置唯一排序值定位         sourceBuilder.sort(SortBuilders.fieldSort("operationtime").order(SortOrder.DESC));         //将sourceBuilder对象添加到搜索请求中         searchRequest.source(sourceBuilder);         // 发送请求         SearchResponse searchResponse = esClient.search(searchRequest, RequestOptions.DEFAULT);         SearchHit[] hits = searchResponse.getHits().getHits();         List&lt;Map&lt;String, Object&gt;&gt; result = new ArrayList&lt;&gt;();         if (hits != null &amp;&amp; hits.length &gt; 0) {             for (SearchHit hit : hits) {                 // 获取需要数据                 Map&lt;String, Object&gt; sourceAsMap = hit.getSourceAsMap();                 result.add(sourceAsMap);             }         }         logger.info("查询出来的数据个数为：{}", result.size());         // 关闭客户端         esClient.close();         logger.info("运行时间: " + (System.currentTimeMillis() - startTime) + "ms");     } }</code></pre> <p>运行结果：</p> <pre><code class="language-java">10:08:40.466 [main] INFO com.example.es.test.ESTest_searchAfter - 查询出来的数据个数为：1000 10:08:40.474 [main] INFO com.example.es.test.ESTest_searchAfter - 运行时间: 1506ms</code></pre> <p>现象：</p> <p>如果from size 查询的数据超过10000条，会报错误</p> <h2>2、search after</h2> <pre><code class="language-java">package com.example.es.test;  import org.apache.http.HttpHost; import org.elasticsearch.action.search.SearchRequest; import org.elasticsearch.action.search.SearchResponse; import org.elasticsearch.client.RequestOptions; import org.elasticsearch.client.RestClient; import org.elasticsearch.client.RestHighLevelClient; import org.elasticsearch.search.SearchHit; import org.elasticsearch.search.builder.SearchSourceBuilder; import org.elasticsearch.search.sort.SortBuilders; import org.elasticsearch.search.sort.SortOrder; import org.slf4j.Logger; import org.slf4j.LoggerFactory;  import java.util.ArrayList; import java.util.List; import java.util.Map;  /**  * @author  * @Description  es 的search_after方法  * @date 2022/01/11 14:04  */ public class ESTest_searchAfter {      public static final Logger logger = LoggerFactory.getLogger(ESTest_searchAfter.class);      public static void main(String[] args) throws Exception{         long startTime = System.currentTimeMillis();         // 创建ES客户端         RestHighLevelClient esClient = new RestHighLevelClient(                 RestClient.builder(new HttpHost("localhost", 9200, "http"))         );         // 1、创建searchRequest         SearchRequest searchRequest = new SearchRequest("audit2");         // 2、指定查询条件         SearchSourceBuilder sourceBuilder = new SearchSourceBuilder().trackTotalHits(true);//必须加上track_total_hits，不然就只显示10000         //设置每页查询的数据个数         sourceBuilder.size(1000);         // 设置唯一排序值定位         sourceBuilder.sort(SortBuilders.fieldSort("operationtime").order(SortOrder.DESC));//多条件查询         //将sourceBuilder对象添加到搜索请求中         searchRequest.source(sourceBuilder);         // 发送请求         SearchResponse searchResponse = esClient.search(searchRequest, RequestOptions.DEFAULT);         SearchHit[] hits1 = searchResponse.getHits().getHits();         List&lt;Map&lt;String, Object&gt;&gt; result = new ArrayList&lt;&gt;();         if (hits1 != null &amp;&amp; hits1.length &gt; 0) {             do {                 for (SearchHit hit : hits1) {                     // 获取需要数据                     Map&lt;String, Object&gt; sourceAsMap = hit.getSourceAsMap();                     result.add(sourceAsMap);                 }                 // 取得最后得排序值sort，用于记录下次将从这个地方开始取数                 SearchHit[] hits = searchResponse.getHits().getHits();                 Object[] lastNum = hits[hits.length - 1].getSortValues();                 // 设置searchAfter的最后一个排序值                 sourceBuilder.searchAfter(lastNum);                 searchRequest.source(sourceBuilder);                 // 进行下次查询                 searchResponse = esClient.search(searchRequest, RequestOptions.DEFAULT);             } while (searchResponse.getHits().getHits().length != 0);         }         logger.info("查询出来的数据个数为：{}", result.size());         // 关闭客户端         esClient.close();         logger.info("运行时间: " + (System.currentTimeMillis() - startTime) + "ms");     }  }</code></pre> <p>运行结果：</p> <pre><code class="language-java">16:11:44.057 [main] INFO com.example.es.test.ESTest_searchAfter - 查询出来的数据个数为：64000 16:11:44.061 [main] INFO com.example.es.test.ESTest_searchAfter - 运行时间: 20979ms</code></pre> <p>现象：audit2该索引里面总共就69873条数据，控制台打印的信息是每1000条的查询打印出来，最终查询出来64000条记录，还有5873条数据丢失了。还有size如果超过10000，也会报错。</p> <p>我自己的疑问：search after既然不能跳页查询，只能一页一页的查询出来，那前端调用这个接口后端不是还是返回全部的数据吗。那如果前端设置成向下滚动查询，然后滚轮向下几页后端就返回几页数据，后端不是会更省查询的时间吗。现在search after还是一次性将数据查询出来，只是内部它是一页一页查询出来的，最终展示出来的还是全部的数据。这个我有疑问，我应该怎么与前端对接这个接口。</p> <h2>3、scroll</h2> <pre><code class="language-java">package com.example.es.test;  import org.apache.http.HttpHost; import org.elasticsearch.action.search.*; import org.elasticsearch.client.RequestOptions; import org.elasticsearch.client.RestClient; import org.elasticsearch.client.RestHighLevelClient; import org.elasticsearch.common.unit.TimeValue; import org.elasticsearch.index.query.QueryBuilders; import org.elasticsearch.search.SearchHit; import org.elasticsearch.search.builder.SearchSourceBuilder; import org.elasticsearch.search.sort.SortBuilders; import org.elasticsearch.search.sort.SortOrder; import org.slf4j.Logger; import org.slf4j.LoggerFactory;  import java.util.ArrayList; import java.util.List; import java.util.Map;   /**  * @author   * @Description  java 实现scroll滚动查询  * @date 2021/12/08 14:09  */ public class ESTest_Scroll {      public static final Logger logger = LoggerFactory.getLogger(ESTest_Scroll.class);      public static void main(String[] args) throws Exception{         long startTime = System.currentTimeMillis();         // 创建ES客户端         RestHighLevelClient esClient = new RestHighLevelClient(                 RestClient.builder(new HttpHost("localhost", 9200, "http"))         );         // 1、创建searchRequest         SearchRequest searchRequest = new SearchRequest("audit2");         // 2、指定scroll信息         searchRequest.scroll(TimeValue.timeValueMinutes(1L));         // 3、指定查询条件         SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();         searchSourceBuilder.size(1000);         searchSourceBuilder.sort(SortBuilders.fieldSort("operationtime").order(SortOrder.DESC));//多条件查询         searchRequest.source(searchSourceBuilder);         //4、获取返回结果scrollId，source         SearchResponse searchResponse = esClient.search(searchRequest, RequestOptions.DEFAULT); //通过发送初始搜索请求来初始化搜索上下文         String scrollId = searchResponse.getScrollId();         SearchHit[] searchHits = searchResponse.getHits().getHits();         List&lt;Map&lt;String, Object&gt;&gt; result = new ArrayList&lt;&gt;();         for (SearchHit hit: searchHits) {             result.add(hit.getSourceAsMap());         }         // java也是一样要查询两次，先把我们的首页给查询出来         // 查询出来之后我们要获取他的id         // 然后利用他的id去查询他的下一页         while (true) {             //5、循环  -  创建 SearchScrollRequest  创建一个新的搜索滚动请求，保存最后返回的滚动标识符和滚动间隔             // 获取 scrollId 去查询下一页             SearchScrollRequest scrollRequest = new SearchScrollRequest(scrollId);             //6、指定scrollId的生存时间             scrollRequest.scroll(TimeValue.timeValueMinutes(1L));             //7、执行查询获取返回结果             SearchResponse scrollResp = esClient.scroll(scrollRequest, RequestOptions.DEFAULT);             //8、判断是否查询到了数据，输出             SearchHit[] hits = scrollResp.getHits().getHits();             //循环输出下一页             if (hits != null &amp;&amp; hits.length &gt; 0) {                 for (SearchHit hit : hits) {                     result.add(hit.getSourceAsMap());                 }             } else {                 //9、判断没有查询到数据，退出循环                 break;             }         }         //查完之后我们把存进缓存的id给删除  完成滚动后，清除滚动上下文         //10、创建ClearScrollRequest         ClearScrollRequest clearScrollRequest = new ClearScrollRequest();         //11、指定scrollId         clearScrollRequest.addScrollId(scrollId);         //12、删除scrollId         ClearScrollResponse clearScrollResponse = esClient.clearScroll(clearScrollRequest, RequestOptions.DEFAULT);         //13、输出结果         boolean succeeded = clearScrollResponse.isSucceeded();         logger.info("删除scrollId：{}", succeeded);         logger.info("查询总个数：{}", result.size());         // 关闭客户端         esClient.close();         logger.info("运行时间: " + (System.currentTimeMillis() - startTime) + "ms");     }  }</code></pre> <p>运行结果：</p> <pre><code class="language-java">16:20:54.794 [main] INFO com.example.es.test.ESTest_Scroll - 删除scrollId：true 16:20:54.795 [main] INFO com.example.es.test.ESTest_Scroll - 查询总个数：69873 16:20:54.797 [main] INFO com.example.es.test.ESTest_Scroll - 运行时间: 5716ms</code></pre> <p>现象：</p> <p>audit2该索引里面总共就69873条数据，最终查询出来69873条记录，一条记录都没有丢失。还有size如果超过10000，也会报错。很奇怪，search after会丢失数据，而scroll一条记录没有丢失。</p> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-82989.htm">人打动物疫苗有用吗 人打动物疫苗有用吗现在</a></p>
                                        <p>下一个：<a href="/news/article-83702.htm">猫咪领养协议书下载电子版（宠物猫领养协议书范本）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-70758.htm" title="王允海动物医院（王允海动物医院道里店怎么样）">王允海动物医院（王允海动物医院道里店怎么样）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-20-latest-kitsunebi-node.htm" title="1月20日→19.5M/S|2025年最新免费节点Kitsunebi Node订阅链接地址">1月20日→19.5M/S|2025年最新免费节点Kitsunebi Node订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-53478.htm" title="Vue2.0 Vue路由 全局后置路由守卫">Vue2.0 Vue路由 全局后置路由守卫</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-18-node-share.htm" title="3月18日→20.4M/S|2025年最新免费节点Kitsunebi Node订阅链接地址">3月18日→20.4M/S|2025年最新免费节点Kitsunebi Node订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-22-kitsunebi-node-share.htm" title="1月22日→20M/S|2025年最新免费节点Kitsunebi Node订阅链接地址">1月22日→20M/S|2025年最新免费节点Kitsunebi Node订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-47786.htm" title="美联教育电话（美联培训学校）">美联教育电话（美联培训学校）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-24-free-kitsunebi-node.htm" title="1月24日→19.9M/S|2025年最新免费节点Kitsunebi Node订阅链接地址">1月24日→19.9M/S|2025年最新免费节点Kitsunebi Node订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-26-free-subscribe-node.htm" title="3月26日→18.9M/S|2025年最新免费节点Kitsunebi Node订阅链接地址">3月26日→18.9M/S|2025年最新免费节点Kitsunebi Node订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-37919.htm" title="6-10java8中关于接口的新特性">6-10java8中关于接口的新特性</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-14-free-node-subscribe-links.htm" title="1月14日→19.5M/S|2025年最新免费节点Kitsunebi Node订阅链接地址">1月14日→19.5M/S|2025年最新免费节点Kitsunebi Node订阅链接地址</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">92</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
    <!-- /details page -->
        <footer>
        <div class="container">
            <div class="py-4 text-center">
                <p class="text-light">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                    <a href="/">Kitsunebi Node机场节点订阅官网</a> 版权所有 Powered by WordPress
                </p>
            </div>
        </div>
    </footer>
    <!-- plugins -->
    <script src="/assets/website/js/frontend/kitsunebinode/jQuery/jquery.min.js"></script>
    <script src="/assets/website/js/frontend/kitsunebinode/bootstrap/bootstrap.min.js"></script>
    <script src="/assets/website/js/frontend/kitsunebinode/masonry/masonry.min.js"></script>
    <script src="/assets/website/js/frontend/kitsunebinode/clipboard/clipboard.min.js"></script>
    <script src="/assets/website/js/frontend/kitsunebinode/match-height/jquery.matchHeight-min.js"></script>
    <!-- Main Script -->
    <script src="/assets/website/js/frontend/kitsunebinode/script.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>